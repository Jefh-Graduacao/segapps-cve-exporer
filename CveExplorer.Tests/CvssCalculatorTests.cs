namespace CveExplorer.Tests;

public class CvssCalculatorTests
{
    [Theory]
    [InlineData("AV:L/AC:H/Au:N/C:C/I:C/A:C", 6.2)]
    [InlineData("AV:N/AC:L/Au:N/C:C/I:C/A:C", 10.0)]
    [InlineData("AV:N/AC:L/Au:N/C:N/I:N/A:C", 7.8)]    
    [InlineData("AV:A/AC:L/Au:S/C:C/I:C/A:C", 7.7)]    
    [InlineData("AV:A/AC:L/Au:S/C:N/I:N/A:C", 5.5)]    
    [InlineData("AV:L/AC:H/Au:M/C:N/I:N/A:N", 0.0)]
    [InlineData("AV:A/AC:H/Au:M/C:N/I:N/A:N", 0.0)]    
    [InlineData("AV:N/AC:H/Au:M/C:N/I:N/A:N", 0.0)]
    [InlineData("AV:N/AC:M/Au:M/C:N/I:N/A:N", 0.0)]
    [InlineData("AV:N/AC:L/Au:M/C:N/I:N/A:N", 0.0)]    
    public void ShouldCalculateBaseScore(string vetorCvss, decimal pontuacaoBase)
    {
        var calculator = new CvssCalculator(vetorCvss);
        var result = calculator.CalculateBaseScore();
            
        Assert.Equal(expected: pontuacaoBase, actual: result);
    }

    [Theory]
    [InlineData("AV:N/AC:L/Au:N/C:N/I:N/A:C/E:F/RL:OF/RC:C", 6.4)]
    [InlineData("AV:N/AC:L/Au:N/C:C/I:C/A:C/E:F/RL:OF/RC:C", 8.3)]
    [InlineData("AV:L/AC:H/Au:N/C:C/I:C/A:C/E:POC/RL:OF/RC:C", 4.9)]
    [InlineData("AV:L/AC:H/Au:N/C:C/I:P/A:N/E:F/RL:TF/RC:ND", 4.0)]
    [InlineData("AV:L/AC:H/Au:N/C:C/I:P/A:N/E:F/RL:TF/RC:UR", 3.8)]
    public void ShouldCalculateTemporalScore(string vector, decimal temporalScore)
    {
        var calculator = new CvssCalculator(vector);
        var result = calculator.CalculateTemporalScore();

        Assert.Equal(expected: temporalScore, actual: result);
    }

    [Theory]
    [InlineData("AV:A/AC:L/Au:S/C:N/I:N/A:C/E:POC/RL:TF/RC:C/CDP:LM/TD:M/CR:H/IR:M/AR:M", 4.6)]    
    [InlineData("AV:A/AC:M/Au:S/C:N/I:N/A:C/E:POC/RL:OF/RC:C/CDP:L/TD:M/CR:H/IR:M/AR:M", 3.5)]    
    [InlineData("AV:A/AC:M/Au:S/C:N/I:N/A:C/E:POC/RL:U/RC:C/CDP:L/TD:N/CR:H/IR:M/AR:M", 0.0)]
    [InlineData("AV:N/AC:M/Au:S/C:N/I:N/A:C/E:POC/RL:U/RC:C/CDP:L/TD:M/CR:H/IR:M/AR:M", 4.6)]
    [InlineData("AV:N/AC:M/Au:S/C:N/I:N/A:C/E:POC/RL:U/RC:C/CDP:H/TD:M/CR:H/IR:M/AR:M", 5.9)]
    
    [InlineData("AV:N/AC:L/Au:N/C:C/I:C/A:C/E:F/RL:TF/RC:UR/CDP:MH/TD:H/CR:H/IR:H/AR:L", 8.9)]
    [InlineData("AV:A/AC:L/Au:S/C:N/I:N/A:C/E:POC/RL:TF/RC:C/CDP:MH/TD:H/CR:H/IR:H/AR:H", 7.7)]
    [InlineData("AV:N/AC:M/Au:N/C:P/I:N/A:C/E:POC/RL:TF/RC:C/CDP:H/TD:M/CR:H/IR:M/AR:M", 6.2)]

    [InlineData("AV:N/AC:L/Au:M/C:P/I:P/A:C/E:F/RL:TF/RC:C/CDP:L/TD:M/CR:M/IR:M/AR:L", 4.2)]
    [InlineData("AV:N/AC:L/Au:M/C:P/I:P/A:C/E:POC/RL:TF/RC:C/CDP:LM/TD:M/CR:M/IR:M/AR:L", 4.8)]
    [InlineData("AV:N/AC:L/Au:M/C:C/I:C/A:C/E:POC/RL:TF/RC:C/CDP:N/TD:H/CR:M/IR:H/AR:H", 6.7)]

    //[InlineData("AV:N/AC:L/Au:N/C:C/I:C/A:C/E:F/RL:OF/RC:C/CDP:L/TD:L/CR:M/IR:M/AR:L", 2.1)]
    public void ShouldCalculateEnvironmentalScore(string vector, decimal envScore)
    {
        var calculator = new CvssCalculator(vector);
        var result = calculator.CalculateEnvironmentalScore();

        Assert.Equal(expected: envScore, actual: result);
    }
}