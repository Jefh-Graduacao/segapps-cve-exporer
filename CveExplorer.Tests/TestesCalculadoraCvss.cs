namespace CveExplorer.Tests;

public class TestesCalculadoraCvss
{
    [Theory]
    [InlineData("AV:L/AC:H/Au:N/C:C/I:C/A:C", 6.2)]
    [InlineData("AV:N/AC:L/Au:N/C:C/I:C/A:C", 10.0)]
    [InlineData("AV:N/AC:L/Au:N/C:N/I:N/A:C", 7.8)]
    public void Teste_CalculoPontuacaoBase(string vetorCvss, decimal pontuacaoBase)
    {
        var calculadoraCvss = new CalculadoraCvss(vetorCvss);
        var resultado = calculadoraCvss.CalcularPontuacaoBase();
            
        Assert.Equal(expected: pontuacaoBase, actual: resultado);
    }

    [Theory]
    [InlineData("AV:N/AC:L/Au:N/C:N/I:N/A:C/E:F/RL:OF/RC:C", 6.4)]
    [InlineData("AV:N/AC:L/Au:N/C:C/I:C/A:C/E:F/RL:OF/RC:C", 8.3)]
    [InlineData("AV:L/AC:H/Au:N/C:C/I:C/A:C/E:POC/RL:OF/RC:C", 4.9)]
    [InlineData("AV:L/AC:H/Au:N/C:C/I:P/A:N/E:F/RL:TF/RC:ND", 4.0)]
    [InlineData("AV:L/AC:H/Au:N/C:C/I:P/A:N/E:F/RL:TF/RC:UR", 3.8)]
    public void Teste_CalculoPontuacaoTemporal(string vetorCvss, decimal pontuacaoTemporal)
    {
        var calculadoraCvss = new CalculadoraCvss(vetorCvss);
        var resultado = calculadoraCvss.CalcularPontuacaoTemporal();

        Assert.Equal(expected: pontuacaoTemporal, actual: resultado);
    }

    [Theory]
    [InlineData("AV:N/AC:L/Au:N/C:C/I:C/A:C/E:F/RL:OF/RC:C/CDP:L/TD:L/CR:M/IR:M/AR:L", 2.0)]
    [InlineData("AV:N/AC:L/Au:N/C:C/I:C/A:C/E:F/RL:TF/RC:UR/CDP:MH/TD:H/CR:H/IR:H/AR:L", 8.9)]
    public void Teste_CalculoPontuacaoAmbiental(string vetorCvss, decimal pontuacaoAmbiental)
    {
        var calculadoraCvss = new CalculadoraCvss(vetorCvss);
        var resultado = calculadoraCvss.CalcularPontuacaoAmbiental();

        Assert.Equal(expected: pontuacaoAmbiental, actual: resultado);
    }
}