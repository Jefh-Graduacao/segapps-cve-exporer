using System.Text.RegularExpressions;

namespace CveExplorer.Winforms;

public partial class CvssInfoForm : Form
{
    private readonly string _prefixBaseScore = $"Base Score: {Environment.NewLine}";
    private readonly string _prefixTemporalScore = $"Temporal Score: {Environment.NewLine}";
    private readonly string _prefixEnvironmentalScore = $"Environmental Score: {Environment.NewLine}";
    
    private readonly Regex _regexCvssBaseScore
        = new(@"^(AV:)(L|A|N)\/(AC:)(H|M|L)\/(Au:)(M|S|N)\/(C:)(N|P|C)\/(I:)(N|P|C)\/(A:)(N|P|C)$");

    private string _cvssBaseVector = "";

    public CvssInfoForm(string cvssBaseVector, double cvssBaseScore, DateTime? cvssTime)
    {
        InitializeComponent();

        txtCvss.Text = cvssBaseScore.ToString("N2");
        txtCvssTime.Text = cvssTime?.ToString(Constants.DateFormat) ?? "";
        txtCvssBaseVector.Text = _cvssBaseVector = cvssBaseVector;

        UpdateCvssVector();

        if (!string.IsNullOrEmpty(_cvssBaseVector))
            CalculateCvssFromVector();
    }

    private void CalculateCvssFromVector()
    {
        var calculadoraCvss = new CvssCalculator(txtCvssVectorComplete.Text);

        var baseScore = calculadoraCvss.CalculateBaseScore();
        var temporalScore = calculadoraCvss.CalculateTemporalScore();
        var environmentalScore = calculadoraCvss.CalculateEnvironmentalScore();

        UpdateScoreLabels(baseScore, temporalScore, environmentalScore);
    }

    private void UpdateScoreLabels(decimal baseScore, decimal temporalScore, decimal environmentalScore)
    {
        lbPontuacaoBase.Text = $"{_prefixBaseScore}{baseScore:n2}";
        lbPontuacaoTemporal.Text = $"{_prefixTemporalScore}{temporalScore:n2}";
        lbPontuacaoAmbiental.Text = $"{_prefixEnvironmentalScore}{environmentalScore:n2}";
    }

    private void radioMetric_CheckedChanged(object sender, EventArgs e)
    {
        if (string.IsNullOrEmpty(_cvssBaseVector))
            return;

        UpdateCvssVector();
                
        CalculateCvssFromVector();
    }

    private void btSetCvssBaseVector_Click(object sender, EventArgs e)
    {
        if (!string.IsNullOrEmpty(txtCvssBaseVector.Text) && !_regexCvssBaseScore.IsMatch(txtCvssBaseVector.Text))
        {
            MessageBox.Show("Vetor CVSS inválido", "", MessageBoxButtons.OK, MessageBoxIcon.Warning);
            return;
        }

        _cvssBaseVector = txtCvssBaseVector.Text;

        UpdateCvssVector();
        CalculateCvssFromVector();
    }

    private void UpdateCvssVector()
    {
        var radios = Controls.OfType<GroupBox>()
            .OrderBy(gp => gp.TabIndex)
            .SelectMany(gpBox => gpBox.Controls.OfType<RadioButton>())
            .Where(radio => radio.Checked)
            .ToArray();

        var temporalAndEnvironmentalVector = string.Join("/", radios.Select(r => r.Tag.ToString()));
        var cvssVector = txtCvssBaseVector.Text + "/" + temporalAndEnvironmentalVector;
        txtCvssVectorComplete.Text = cvssVector;
    }
}