using System.Text.Json;
using System.Text.RegularExpressions;

namespace CveExplorer;

public class CveApi
{
    private readonly HttpClient _httpClient = new();
    private readonly Regex _regexCveId = new(@"^CVE-(\d{4})-(\d+)$");
    private readonly JsonSerializerOptions _jsonSerializerOptions = new()
    {
        PropertyNamingPolicy = JsonNamingPolicy.CamelCase
    };

    public CveApi()
    {
        _httpClient.BaseAddress = new Uri("https://cve.circl.lu/api/cve/");
    }

    public async Task<Cve> GetById(string cveId)
    {
        if (cveId is null || !_regexCveId.IsMatch(cveId))
            throw new Exception($"CVE Id inválido {cveId}");

        var response = await _httpClient.GetAsync(cveId);

        if (response.StatusCode == System.Net.HttpStatusCode.NotFound)
            throw new Exception("CVE não encontrada");

        return JsonSerializer.Deserialize<Cve>(await response.Content.ReadAsStreamAsync(), _jsonSerializerOptions)
            ?? throw new Exception("Impossível deserializar");
    }
}
