namespace CveExplorer;

public class CvssCalculator
{
    private readonly Dictionary<string, string> _cvssMatrix;

    private decimal _confidentialityImpact;
    private decimal _integrityImpact;
    private decimal _availabilityImpact;

    private decimal? _baseScore;
    private decimal? _impactoAjustado;

    public CvssCalculator(string vetorCvss)
    {
        _cvssMatrix = BuildCvssMatrix(vetorCvss);
    }

    private static Dictionary<string, string> BuildCvssMatrix(string vetorCvss)
    {
        return vetorCvss.TrimStart('/').TrimEnd('/').Split("/")
            .Select(vecItem => vecItem.Split(":"))
            .ToDictionary(a => a[0], a => a[1]);
    }

    public decimal CalculateBaseScore()
    {
        _availabilityImpact = _cvssMatrix.GetValueOrDefault("A") switch
        {
            "N" => 0.0m,
            "P" => 0.275m,
            "C" => 0.660m,
            _ => 0.0m
        };

        _integrityImpact = _cvssMatrix.GetValueOrDefault("I") switch
        {
            "N" => 0.0m,
            "P" => 0.275m,
            "C" => 0.660m,
            _ => 0.0m
        };

        _confidentialityImpact = _cvssMatrix.GetValueOrDefault("C") switch
        {
            "N" => 0.0m,
            "P" => 0.275m,
            "C" => 0.660m,
            _ => 0.0m
        };

        var authentication = _cvssMatrix.GetValueOrDefault("Au") switch
        {
            "M" => 0.45m,
            "S" => 0.56m,
            "N" => 0.704m,
            _ => 0.0m
        };

        var accessComplexity = _cvssMatrix.GetValueOrDefault("AC") switch
        {
            "H" => 0.35m,
            "M" => 0.61m,
            "L" => 0.71m,
            _ => 0.0m
        };

        var accessVector = _cvssMatrix.GetValueOrDefault("AV") switch
        {
            "L" => 0.395m,
            "A" => 0.646m,
            "N" => 1.0m,
            _ => 0.0m
        };


        static decimal f(decimal impact) => impact == 0 ? 0 : 1.176m;

        var exploitability = Round(20 * accessVector * accessComplexity * authentication);
        
        var impact =
            _impactoAjustado ??
            Round(10.41m * (1 - (1 - _confidentialityImpact) * (1 - _integrityImpact) * (1 - _availabilityImpact)));
        
        var fImpact = f(impact);

        _baseScore = Round(((0.6m * impact) + (0.4m * exploitability) - 1.5m) * fImpact);
        return _baseScore.Value;
    }

    public decimal CalculateTemporalScore()
    {
        var reportConfidence = _cvssMatrix.GetValueOrDefault("RC") switch
        {
            "UC" => 0.90m,
            "UR" => 0.95m,
            "C" => 1.00m,
            "ND" => 1.00m,
            _ => 0
        };

        var remediationLevel = _cvssMatrix.GetValueOrDefault("RL") switch
        {
            "OF" => 0.87m,
            "TF" => 0.90m,
            "W" => 0.95m,
            "U" => 1.00m,
            "ND" => 1.00m,
            _ => 0
        };

        var exploitability = _cvssMatrix.GetValueOrDefault("E") switch
        {
            "U" => 0.85m,
            "POC" => 0.90m,
            "F" => 0.95m,
            "H" => 1.00m,
            "ND" => 1.00m,
            _ => 0
        };

        var baseScore = _baseScore ?? CalculateBaseScore();
        var temporalScore = Round(baseScore * exploitability * remediationLevel * reportConfidence);
        return temporalScore;
    }

    public decimal CalculateEnvironmentalScore()
    {
        var collateralDamagePotential = _cvssMatrix.GetValueOrDefault("CDP") switch
        {
            "N" => 0m,
            "L" => 0.1m,
            "LM" => 0.3m,
            "MH" => 0.4m,
            "H" => 0.5m,
            "ND" => 0m,
            _ => 0m
        };

        var targetDistribution = _cvssMatrix.GetValueOrDefault("TD") switch
        {
            "N" => 0m,
            "L" => 0.25m,
            "M" => 0.75m,
            "H" => 1.00m,
            "ND" => 1.00m,
            _ => 0
        };

        var confReq = _cvssMatrix.GetValueOrDefault("CR") switch
        {
            "L" => 0.5m,
            "M" => 1.0m,
            "H" => 1.51m,
            "ND" => 1.0m,
            _ => 0
        };

        var integReq = _cvssMatrix.GetValueOrDefault("IR") switch
        {
            "L" => 0.5m,
            "M" => 1.0m,
            "H" => 1.51m,
            "ND" => 1.0m,
            _ => 0
        };

        var availReq = _cvssMatrix.GetValueOrDefault("AR") switch
        {
            "L" => 0.5m,
            "M" => 1.0m,
            "H" => 1.51m,
            "ND" => 1.0m,
            _ => 0
        };

        CalculateBaseScore();
        CalculateTemporalScore();

        _impactoAjustado = Round(Math.Min(10, 10.41m 
            * (1 - (1 - _confidentialityImpact * confReq)
            * (1 - _integrityImpact * integReq)
            * (1 - _availabilityImpact * availReq))
        ));
                        
        _baseScore = CalculateBaseScore();
        var adjustedTemporalScore = CalculateTemporalScore();

        var environmentalScore = Round((adjustedTemporalScore +
                                        (10 - adjustedTemporalScore) * collateralDamagePotential) *
                                       targetDistribution);

        return environmentalScore;
    }

    private static decimal Round(decimal input) => Math.Round(input, 1);
}