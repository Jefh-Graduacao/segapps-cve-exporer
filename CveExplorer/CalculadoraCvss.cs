namespace CveExplorer;

public class CalculadoraCvss
{
    private readonly Dictionary<string, string> _matrizCvss;

    private decimal _confidentialityImpact;
    private decimal _integrityImpact;
    private decimal _availabilityImpact;

    private decimal? _pontuacaoBase;
    private decimal? _impactoAjustado;

    public CalculadoraCvss(string vetorCvss)
    {
        _matrizCvss = ConstruirMatrizCvss(vetorCvss);
    }

    private static Dictionary<string, string> ConstruirMatrizCvss(string vetorCvss)
    {
        return vetorCvss.Split("/")
            .Select(itemVetor => itemVetor.Split(":"))
            .ToDictionary(a => a[0], a => a[1]);
    }

    public decimal CalcularPontuacaoBase()
    {
        _availabilityImpact = _matrizCvss.GetValueOrDefault("A") switch
        {
            "N" => 0.0m,
            "P" => 0.275m,
            "C" => 0.660m,
            _ => 0.0m
        };

        _integrityImpact = _matrizCvss.GetValueOrDefault("I") switch
        {
            "N" => 0.0m,
            "P" => 0.275m,
            "C" => 0.660m,
            _ => 0.0m
        };

        _confidentialityImpact = _matrizCvss.GetValueOrDefault("C") switch
        {
            "N" => 0.0m,
            "P" => 0.275m,
            "C" => 0.660m,
            _ => 0.0m
        };

        var authentication = _matrizCvss.GetValueOrDefault("Au") switch
        {
            "M" => 0.45m,
            "S" => 0.275m,
            "N" => 0.704m,
            _ => 0.0m
        };

        var accessComplexity = _matrizCvss.GetValueOrDefault("AC") switch
        {
            "H" => 0.35m,
            "M" => 0.61m,
            "L" => 0.71m,
            _ => 0.0m
        };

        var accessVector = _matrizCvss.GetValueOrDefault("AV") switch
        {
            "L" => 0.395m,
            "A" => 0.646m,
            "N" => 1.0m,
            _ => 0.0m
        };


        static decimal f(decimal impact) => impact == 0 ? 0 : 1.176m;

        var exploitability = 20 * accessVector * accessComplexity * authentication;
        
        var impact =
            _impactoAjustado ??
            10.41m * (1 - (1 - _confidentialityImpact) * (1 - _integrityImpact) * (1 - _availabilityImpact));
        
        var fImpact = f(impact);

        _pontuacaoBase = Round(((0.6m * impact) + (0.4m * exploitability) - 1.5m) * fImpact);
        return _pontuacaoBase.Value;
    }

    public decimal CalcularPontuacaoTemporal()
    {
        var reportConfidence = _matrizCvss.GetValueOrDefault("RC") switch
        {
            "UC" => 0.90m,
            "UR" => 0.95m,
            "C" => 1.00m,
            "ND" => 1.00m,
            _ => 0
        };

        var remediationLevel = _matrizCvss.GetValueOrDefault("RL") switch
        {
            "OF" => 0.87m,
            "TF" => 0.90m,
            "W" => 0.95m,
            "U" => 1.00m,
            "ND" => 1.00m,
            _ => 0
        };

        var exploitability = _matrizCvss.GetValueOrDefault("E") switch
        {
            "U" => 0.85m,
            "POC" => 0.90m,
            "F" => 0.95m,
            "H" => 1.00m,
            "ND" => 1.00m,
            _ => 0
        };

        var pontuacaoBase = _pontuacaoBase ?? CalcularPontuacaoBase();
        var pontuacaoTemporal = Round(pontuacaoBase * exploitability * remediationLevel * reportConfidence);
        return pontuacaoTemporal;
    }

    public decimal CalcularPontuacaoAmbiental()
    {
        var collateralDamagePotential = _matrizCvss.GetValueOrDefault("CDP") switch
        {
            "N" => 0m,
            "L" => 0.1m,
            "LM" => 0.3m,
            "MH" => 0.4m,
            "H" => 0.5m,
            "ND" => 0m,
            _ => 0m
        };

        var targetDistribution = _matrizCvss.GetValueOrDefault("TD") switch
        {
            "N" => 0m,
            "L" => 0.25m,
            "M" => 0.75m,
            "H" => 1.00m,
            "ND" => 1.00m,
            _ => 0
        };

        var confReq = _matrizCvss.GetValueOrDefault("CR") switch
        {
            "L" => 0.5m,
            "M" => 1.0m,
            "H" => 1.51m,
            "ND" => 1.0m,
            _ => 0
        };

        var integReq = _matrizCvss.GetValueOrDefault("IR") switch
        {
            "L" => 0.5m,
            "M" => 1.0m,
            "H" => 1.51m,
            "ND" => 1.0m,
            _ => 0
        };

        var availReq = _matrizCvss.GetValueOrDefault("AR") switch
        {
            "L" => 0.5m,
            "M" => 1.0m,
            "H" => 1.51m,
            "ND" => 1.0m,
            _ => 0
        };

        CalcularPontuacaoBase();
        CalcularPontuacaoTemporal();

        _impactoAjustado = Round(Math.Min(10, 10.41m 
            * (1 - (1 - _confidentialityImpact * confReq)
            * (1 - _integrityImpact * integReq)
            * (1 - _availabilityImpact * availReq))
        ));
        
        _pontuacaoBase = CalcularPontuacaoBase();
        var pontuacaoTemporalAjustada = CalcularPontuacaoTemporal();

        var pontuacaoAmbiental = Round((pontuacaoTemporalAjustada +
                                        (10 - pontuacaoTemporalAjustada) * collateralDamagePotential) *
                                       targetDistribution);

        return pontuacaoAmbiental;
    }

    private static decimal Round(decimal entrada) => Math.Round(entrada, 1);
}